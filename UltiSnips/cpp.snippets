snippet include
#include $1
endsnippet

snippet iostream
#include <iostream>$0
endsnippet

snippet string
#include <string> $1
endsnippet

snippet main "Basic main" m
int main()
{
	$1

	return (0);
}
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
  $0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
  char buf[1024];
  while(size_t len = fread(buf, 1, sizeof(buf), fp))
    v.insert(v.end(), buf, buf + len);
  fclose(fp);
}
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet class "class" bA
class ${1:`!p snip.rv = snip.basename or "name"`}
{
  public:
    ${1/(\w+).*/$1/}($2);
    ${1/(\w+).*/$1/}(${1/(\w+).*/$1/} const&);
    ${1/(\w+).*/$1/}& operator=(${1/(\w+).*/$1/} const&);
    $3
    virtual ~${1/(\w+).*/$1/}();
    $4
  protected:
    $0
};
endsnippet

snippet for "For loop..."
for ($1 = 0; $1 < $2; $1++)
{

}
endsnippet

snippet interface "Interface class" b
class $1
{
  public:
    virtual ~$1() {}
    virtual $2() = 0;
};
endsnippet

snippet template "template" b
template<typename $1>
$0
endsnippet


snippet header "header epitech"
/*
** `!v expand('%:t')` for `!v expand('%:p:h:t')` in `!v expand('%:p:h')`
**
** Made by Kevin
** Login <kevin.pellet@epitech.eu>>
**
** Started on `!v strftime("%a %b %d %H:%M:%S")` Kevin
** Last Update `!v strftime("%a %b %d %H:%M:%S")` Kevin
*/
$1
endsnippet

