snippet include
#include $1
endsnippet

snippet iostream
#include <iostream>
$1
endsnippet

snippet string
#include <string>
$1
endsnippet

snippet main "Basic main" m
int main(int ac, char** av)
{
	$1

	return (0);
}
endsnippet

snippet ifndef "ifndef for .h files"
#ifndef __$1__
# define __$1__

$2

#endif
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
  ${1/(\w+).*/$1/} (${2:arguments});
  virtual ~${1/(\w+).*/$1/} ();

private:
  ${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
  $0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
  char buf[1024];
  while(size_t len = fread(buf, 1, sizeof(buf), fp))
    v.insert(v.end(), buf, buf + len);
  fclose(fp);
}
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet class "class" bA
class $1
{
  public:
    $1($2);
    $1($1 const&);
    $1& operator=($1 const&);
    $3
    ~$1();
    $4
  protected:
    $4
};
endsnippet
